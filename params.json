{
  "name": "Sarjitsu",
  "tagline": "a containerized setup for visualizing system's SAR data.",
  "body": "Table of Contents\r\n=================\r\n\r\n- [Sarjitsu](#sarjitsu)\r\n- [Installation](#installation)\r\n  - [Quick Install](#for-the-impatient)\r\n  - [Customized Installation](#for-the-ones-whove-found-inner-peace)\r\n  - [Additional Notes](#additional-note)\r\n- [App Flow](#app-flow)\r\n  - [Architecture](#architecture)\r\n  - [Control Flow](#control-flow)\r\n- [FAQs](#faqs)\r\n- [Contributions](#contributions)\r\n  - [TODOs](#todos)\r\n  - [Issue Tracker](#issue-tracker)\r\n  - [License](#license)\r\n\r\n# Sarjitsu\r\n\r\nSarjitsu ingests a SAR (System Activity Reporter) binary data file (located under `/var/log/sa/`) ..and produces dynamic visualizations based on Grafana. The name is inspired from 'SAR + jistsu', so to speak, unleashing the power of SAR data.\r\n\r\nThe app is split in 5 container instances as follows:\r\n\r\n1) `datasource`: Used to store timeseries data and metadata. A full-text search engine powered by elasticsearch\r\n\r\n2) `metricstore`: Postgres powered, used by the frontend (grafana in our case) to store metadata about dashboards, datasource and users.\r\n\r\n3) `frontend`: Powered by Grafana, a dynamic visualization frontend, which performs 2 duties; sources data from elasticsearch\r\n\r\n4) `middleware`: A Python-Flask powered API that talks to backend and metricstore; builds scriped dashboards\r\n\r\n5) `backend`: A NodeJS based web app, which runs the web interface\r\n              for users to upload a SA binary file and obtain visualizations.\r\n\r\n\r\nApplication flow is explained in detail in the section `APP FLOW` below.\r\n\r\n# INSTALLATION\r\n\r\n- Step 0: Make sure you have [docker](https://www.docker.com/) installed.\r\n\r\n### For the impatient:\r\n\r\n- single step setup script  `$ ./setup.sh`\r\n\r\n  WARNING: This script would remove all previously running instances of sarjitsu.\r\n\r\n### For the ones who've found inner peace:\r\n\r\nInstalling by customizing the modularized components, per say, having their own IPs.\r\n\r\n- Step 1: open `conf/sarjitsu.conf` and edit the params as required. If for example,\r\n          you don't want to spawn containers for postgres, grafana or elasticsearch,\r\n          you should leave out their `*_HOST` parameters empty.\r\n\r\n  ```sh\r\n  # metricstore config (postgres) - for grafana's metadata\r\n  DB_HOST=\r\n  # append DB_PORT in grafana.ini db config\r\n  DB_NAME=grafana\r\n  DB_USER=grafana\r\n  DB_PASSWORD=sarjitsu123\r\n  DB_PORT=5432 # default for postgres\r\n\r\n  # datasource config (elasticsearch) - source of timeseries data\r\n  ES_HOST=172.17.0.3\r\n  ES_PORT=9200\r\n\r\n  # frontend config (grafana) - visualization framework\r\n  GRAFANA_HOST=\r\n  GRAFANA_DB_TYPE=postgres\r\n\r\n  # make sure this is above 1024; 3000 is standard\r\n  GRAFANA_PORT=3000\r\n  ```\r\n\r\n  This is minimal config needed to take a look over. Leave the rest of the parameters\r\n  unchanged, if you're unsure.\r\n\r\n- Step 2: After you're sure your configurations are alright, simply run setup.sh\r\n\r\n  ```sh\r\n  $ ./setup.sh\r\n  ```\r\n\r\n  WARNING: This script would remove all previously running instances of sarjitsu.\r\n\r\n### Additional Note\r\n\r\nBe sure to run `# iptables -F` from the host, in case it's not accessible outside. Otherwise check your firewall settings.\r\n\r\n- To stop all running container instances and cleanup sarjitsu, run `$ ./cleanup_sarjitsu`\r\n\r\nBelow mentioned ports will be used for port mapping from container to host, and could be configured in `conf/sarjitsu.conf`. Default bindings are:\r\n\r\n```sh\r\nMETRICSTORE_PORT_MAPPING=9600\r\nDATASOURCE_PORT_MAPPING=9601\r\nFRONTEND_PORT_MAPPING=9602\r\nMIDDLEWARE_PORT_MAPPING=9603\r\nBACKEND_PORT_MAPPING=9604\r\n```\r\n\r\n..This is when all components are containerized.\r\n\r\n----\r\n\r\nBuilding this first time would take some time, as docker images are pulled from dockerhub, customized & built; packages are installed and so on..\r\n\r\nAt the end though, it should output a message like:\r\n```\r\nDone! Go to http://172.17.0.6:80/ to access your application\r\n```\r\n\r\nIf it fails in between, you might wanna take a look at your configurations / environment. If you think it's a bug, you're welcome to open an issue here on github.\r\n\r\nAlso be sure that if you have custom HOST(s) configured, they should match the following versions (for sarjitsu compatibility reasons):\r\n\r\n- Elasticsearch < 2.0 and > 1.5 (containerized version: 1.7.3)\r\n- Grafana > 2.5 and <= 3.0 (containerized version: 3.0.1-1)\r\n- Postgres == 9.5 (containerized version: 9.5 (dockerhub latest))\r\n\r\n# APP FLOW\r\n\r\n### Architecture\r\n\r\nFrom `docs/sarjitsu_architecture.png`:\r\n\r\n![arch](https://raw.githubusercontent.com/arcolife/sarjitsu/master/docs/sarjitsu_architecture.png)\r\n\r\n### Control Flow\r\n\r\nFollowing steps involved in visualizing SA binary file:\r\n\r\n- Step 1: SA Binary upload --> Comptability checks and conversion (if needed)\r\n- Step 2: Conversion to a temporary XML output --> ingestion into Elasticsearch\r\n- Step 3: Creation of dashboard from metadata about the SAR data (time range inferred)\r\n- Step 4: Grafana dashboard generated --> Output tagged with the appropriate nodename\r\n\r\n\r\nSarjitsu's frontend service segragates data into various panels, based on params like CPU, Disk, Network usage.\r\n\r\nDescription of those parameters could be obtained in detail by running the command `$ man sar` on a linux terminal. Or you could read about them [here on the official man page for sar command](http://linux.die.net/man/1/sar)\r\n\r\n# FAQs\r\n\r\n#### Which sysstat versions are supported?\r\n\r\nFiles generated in RHEL 5 OS (old enough) ..upto the ones generated by the latest sysstat version.\r\n\r\n#### How is it unique compared to other existing solutions?\r\n\r\n  What sarjitsu does, is it gives you the unique ability throw in any version of\r\n  `sa binary files` from your system's `/var/log/sa/` folder, to produce visualizations\r\n  with all the SAR params supported till date. This makes it much easier for a user\r\n  to go see what's wrong / different about the system behavior by instantly getting\r\n  access to all the data indexed in a nice NoSQL based full-text search engine and\r\n  a dynamic visualization playground. It further simplifies this process by providing\r\n  a web interface to upload these files to!\r\n\r\n  Sarjitsu also automatically detects the time range of the sa files to display the\r\n  time-series visualizations and names the dashboards based on the nodename of your system.\r\n\r\n  It is not tied to a specific machine, but is an independent solution, as a web app.\r\n\r\n#### Is it portable/scalable ?\r\n\r\n  Sarjitsu is scalable since it keeps the datasource, frontend and backend separately\r\n  and is based on completely scalable and portable solution, i.e., Elasticsearch, Postgres, Grafana and NodeJs ..in their respective containerized environments using Docker.\r\n\r\n# Contributions\r\n\r\n### TODOs\r\n\r\n- Add service discovery\r\n- An update to sarjitsu, for nested docs. Refer to [PR #4694 of grafana](https://github.com/grafana/grafana/pull/4694) for more.\r\n\r\nFor more, refer to `docs/TODO.md`\r\n\r\nIf you think there's a bug in sarjitsu, you're welcome to open an issue here on github and could submit PRs for the same. Any refactoring suggestions/PRs to the app are also welcome.\r\n\r\n### Issue Tracker\r\n\r\nGitHub Issues and Pull Requests managed via [Waffle.io](https://waffle.io/arcolife/sarjitsu)\r\n\r\n### LICENSE\r\n\r\nRefer to GPL v3 `LICENSE` file included in the repo, for reference.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}